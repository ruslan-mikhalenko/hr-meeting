<?php

namespace App\Http\Controllers;

use App\Models\Project;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

use App\Services\TelegramService;

class TelegramController extends Controller
{
    private $telegramService;

    public function __construct(TelegramService $telegramService)
    {
        $this->telegramService = $telegramService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */


    public function handleWebhook(Request $request)
    {
        $update = $request->all();
        Log::info('Telegram Webhook Data:', $update); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

        if (isset($update['message'])) {
            $message = $update['message'];
            $chat = $message['chat'];
            $chatId = $chat['id'];


            if (isset($message['text']) && str_starts_with($message['text'], '/start')) {
                $text = $message['text'];
                $params = explode(' ', $text);
                $payload = $params[1] ?? null;

                Log::info("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start: " . ($payload ?? '–Ω–µ—Ç'));

                if ($payload) {
                    try {
                        $decoded = base64_decode($payload);
                        $decoded = urldecode($decoded); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –Æ–Ω–∏–∫–æ–¥–æ–º

                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ query-—Ñ–æ—Ä–º—É –¥–ª—è parse_str
                        parse_str(str_replace('|', '&', $decoded), $parsed);

                        $id = $parsed['id'] ?? null;
                        $orderId = $parsed['order'] ?? null;
                        $channel = $parsed['channel'] ?? null;


                        // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –¥–µ—Ñ–∏—Å—É
                        $parts = explode('-', $id);

                        // –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å ‚Äî —ç—Ç–æ id –ø—Ä–æ–µ–∫—Ç–∞
                        $progect_id = $parts[1];

                        $project = Project::where('id', $progect_id)->first();



                        Log::info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª —Å —Å–∞–π—Ç–∞: user=$id");

                        /* $messageText = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª - {$project->name}!</b>\n\n"
                            . "üìå –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ:\n"
                            . "‚Ä¢ üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
                            . "‚Ä¢ üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\n"
                            . "‚Ä¢ üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
                            . "üëá <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:</b>"; */


                        $messageText = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª ‚Äî {$project->name}!</b>\n\n"
                            . "üìå <b>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ:</b>\n"
                            . "‚†Ä\n" // –æ—Ç—Å—Ç—É–ø (U+2800 —Å–∏–º–≤–æ–ª, –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
                            . "üîπ {$project->about}\n"
                            . "‚†Ä\n"
                            /* . "üöÄ <i>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!</i>" */
                            . "‚†Ä\n"
                            . "üëá <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:</b>";

                        $this->telegramService->sendMessageWithKeyboard(
                            $chatId,
                            $messageText,
                            [
                                [
                                    ['text' => 'üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'url' => $project->link]
                                ]
                            ],
                            'HTML' // ‚Üê –í–æ—Ç –∑–¥–µ—Å—å –∫–ª—é—á
                        );
                    } catch (\Exception $e) {
                        Log::error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ payload: " . $e->getMessage());
                        $this->telegramService->sendMessage($chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    }
                } else {
                    $this->telegramService->sendMessage($chatId, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.');
                }
            }
        }

        return response()->json(['status' => 'ok']);
    }
}
